index.js
// src/commerce-backend-ui-1/actions/shipstation-config/index.js
const { Core } = require('@adobe/aio-sdk');
const stateLib = require('@adobe/aio-lib-state');
const { MAX_TTL } = stateLib; // Import MAX_TTL constant

async function main(params) {
    const logger = Core.Logger('shipstation-config', { level: 'info' });

    try {
        const state = await stateLib.init();

        if (params.__ow_method === 'post') {
            const body = JSON.parse(params.__ow_body || '{}');
            if (Object.keys(body).length === 0) {
                throw new Error('No configuration data provided');
            }

            await state.put('shipStationConfig', JSON.stringify(body), { ttl: MAX_TTL });
            logger.info('Saved config', body);

            return {
                statusCode: 200,
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ success: true, message: 'Configuration saved' })
            };
        } else {
            const entry = await state.get('shipStationConfig');
            const config = entry ? entry.value : null;
            logger.info('Loaded config', config);

            return {
                statusCode: 200,
                headers: { 'Content-Type': 'application/json' },
                body: config || JSON.stringify({ message: 'No configuration found' })
            };
        }
    } catch (error) {
        logger.error('Error processing request', error);
        return {
            statusCode: 500,
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ success: false, error: error.message })
        };
    }
}

exports.main = main;
index.js
// src/commerce-backend-ui-1/actions/registration/index.js
async function main(params) {
    const namespace = process.env.__OW_NAMESPACE || 'default-namespace';
    const baseUrl = `https://${namespace}.adobeio-static.net`;
    const href = `${baseUrl}/index.html`;
    return {
        statusCode: 200,
        body: {
            registration: {
                name: "shipstation-extension",
                title: "ShipStation Extension",
                description: "ShipStation out-of-process shipping integration for Adobe Commerce",
                icon: "none",
                publisher: "PUBLISHER_ID",
                status: "PUBLISHED",

                endpoints: {
                    "commerce/backend-ui/1": {
                        view: [
                            {
                                href: href
                            }
                        ]
                    }
                },

                xrInfo: {
                    supportEmail: "extensions@blueacorn.com",
                    appId: "APP_ID"
                }
            }
        }
    };
}

exports.main = main;
ext.config.yaml
runtimeManifest:
  packages:
    admin-ui-sdk:
      license: Apache-2.0
      actions:
        registration:
          function: actions/registration/index.js
          runtime: nodejs:22
          web: 'yes'
          annotations:
            require-adobe-auth: false
            final: true
index.html
<!-- src/commerce-backend-ui-1/web-src/index.html -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <title>ShipStation Config Editor</title>
</head>
<body>
<div id="root"></div>
<script src="dist/bundle.js"></script>
</body>
</html>
styles.css
/* styles.css */
body {
    margin: 0;
    background: #fafafa;
}

webpack.config.js
// src/commerce-backend-ui-1/web-src/webpack.config.js
const path = require('path');
const webpack = require('webpack');

module.exports = {
    mode: 'production',
    entry: './App.jsx',
    output: {
        path: path.resolve(__dirname, 'dist'),
        filename: 'bundle.js',
        publicPath: '/dist/'
    },
    module: {
        rules: [
            {
                test: /\.jsx?$/,
                exclude: /node_modules/,
                use: {
                    loader: 'babel-loader',
                    options: {
                        presets: ['@babel/preset-env', '@babel/preset-react']
                    }
                }
            },
            {
                test: /\.css$/,
                use: ['style-loader', 'css-loader']
            }
        ]
    },
    resolve: {
        extensions: ['.js', '.jsx']
    },
    plugins: [
        new webpack.DefinePlugin({
            'process.env.NODE_ENV': JSON.stringify(process.env.NODE_ENV || 'development')
        })
    ],
    devServer: {
        static: {
            directory: path.resolve(__dirname),
            publicPath: '/'
        },
        historyApiFallback: true,
        port: 8080,
        setupMiddlewares: (middlewares, devServer) => {
            if (!devServer) {
                throw new Error('webpack-dev-server is not defined');
            }

            devServer.app.get('/mock-config', (req, res) => {
                console.log('Mock GET endpoint hit');
                res.json({
                    config: {
                        shipstationApiKey: 'mock-key',
                        shipstationCarrierIds: 'mock-ids'
                    }
                });
            });

            devServer.app.post('/mock-config', (req, res) => {
                console.log('Mock POST endpoint hit', req.body);
                res.json({ success: true, message: 'Config saved (mock)' });
            });

            return middlewares;
        }
    }
};
package.json
{
  "name": "shipping-station-commerce-web",
  "version": "1.0.0",
  "scripts": {
    "build": "webpack --mode production",
    "start": "webpack serve --mode development"
  },
  "devDependencies": {
    "@babel/core": "^7",
    "@babel/preset-env": "^7.26.9",
    "@babel/preset-react": "^7",
    "babel-loader": "^9",
    "css-loader": "^7.1.2",
    "html-webpack-plugin": "^5.6.3",
    "mini-css-extract-plugin": "^2.9.2",
    "postcss": "^8.5.3",
    "postcss-loader": "^8.1.1",
    "postcss-preset-env": "^10.1.5",
    "react": "^18",
    "react-dom": "^18",
    "style-loader": "^4.0.0",
    "webpack": "^5.76.0",
    "webpack-cli": "^5.0.2",
    "webpack-dev-server": "^5.2.0"
  },
  "dependencies": {
    "@adobe/react-spectrum": "^3.40.0",
    "@adobe/uix-guest": "^1.0.1",
    "@react-spectrum/provider": "^3.10.2",
    "@react-spectrum/theme-default": "^3.5.16"
  }
}
App.jsx
// src/commerce-backend-ui-1/web-src/App.jsx
import React from 'react';
import { Provider } from '@react-spectrum/provider';
import { theme } from '@react-spectrum/theme-default';
import ShipstationConfigForm from './ShipstationConfigForm.jsx';
import ExtensionRegistration from './ExtensionRegistration.jsx';
import ReactDOM from 'react-dom';

export default function App() {
    // Default to mock URL if process is undefined (browser)
    const isDev = typeof process === 'undefined' || process.env.NODE_ENV === 'development';
    const namespace = (typeof process !== 'undefined' && process.env.__OW_NAMESPACE) || '35582-shipstation-stage';
    const appName = 'aio-commerce-shipstation-app';
    const ACTION_URL = isDev
        ? 'http://localhost:8080/mock-config'
        : `${window.location.origin}/api/v1/web/${namespace}-${appName}/shipstation-config`;
    console.log('ACTION_URL:', ACTION_URL);

    return (
        <Provider theme={theme} colorScheme="light">
            <ExtensionRegistration />
            <ShipstationConfigForm actionUrl={ACTION_URL} />
        </Provider>
    );
}

ReactDOM.render(<App />, document.getElementById('root'));
ExtensionRegistration.jsx
// src/commerce-backend-ui-1/web-src/ExtensionRegistration.jsx
import React, { useEffect } from 'react';
import { register } from '@adobe/uix-guest';

export default function ExtensionRegistration() {
    useEffect(() => {
        // Skip registration in development
        if (process.env.NODE_ENV === 'development') {
            console.log('Skipping guest registration in local development');
            return;
        }

        async function init() {
            try {
                await register({
                    id: 'shipstation-app',
                    methods: {}
                });
                console.log('Extension registered successfully');
            } catch (err) {
                console.error('Registration failed:', err);
            }
        }
        init();
    }, []);

    return null;
}
ShipstationConfigForm.jsx
// src/commerce-backend-ui-1/web-src/ShipstationConfigForm.jsx
import React, { useState, useEffect } from 'react';
import {
    Button,
    Form,
    TextField,
    Heading,
    Content,
    View
} from '@adobe/react-spectrum';

export default function ShipstationConfigForm({ actionUrl }) {
    const [apiKey, setApiKey] = useState('');
    const [carrierIds, setCarrierIds] = useState('');
    const [warehouseName, setWarehouseName] = useState('');
    const [warehousePhone, setWarehousePhone] = useState('');
    const [warehouseAddressLine1, setWarehouseAddressLine1] = useState('');
    const [warehouseCity, setWarehouseCity] = useState('');
    const [warehouseState, setWarehouseState] = useState('');
    const [warehousePostcode, setWarehousePostcode] = useState('');
    const [warehouseCountry, setWarehouseCountry] = useState('');
    const [shipToName, setShipToName] = useState('');
    const [shipToPhone, setShipToPhone] = useState('');
    const [statusMsg, setStatusMsg] = useState('Loading config...');

    useEffect(() => {
        async function loadConfig() {
            try {
                const resp = await fetch(actionUrl);
                if (!resp.ok) throw new Error(`GET failed: HTTP ${resp.status}`);
                const data = await resp.json();
                console.log('Fetched config:', data); // Debug response
                if (data.config) {
                    setApiKey(data.config.shipstationApiKey || '');
                    setCarrierIds(data.config.shipstationCarrierIds || '');
                    setWarehouseName(data.config.warehouseName || '');
                    setWarehousePhone(data.config.warehousePhone || '');
                    setWarehouseAddressLine1(data.config.warehouseAddressLine1 || '');
                    setWarehouseCity(data.config.warehouseCityLocality || '');
                    setWarehouseState(data.config.warehouseStateProvince || '');
                    setWarehousePostcode(data.config.warehousePostalCode || '');
                    setWarehouseCountry(data.config.warehouseCountryCode || '');
                    setShipToName(data.config.shipToName || '');
                    setShipToPhone(data.config.shipToPhone || '');
                }
                setStatusMsg('Config loaded successfully');
            } catch (err) {
                console.error('Fetch error:', err); // Debug error
                setStatusMsg(`Error loading config: ${err.message}`);
            }
        }
        loadConfig();
    }, [actionUrl]);

    async function handleSave() {
        const body = {
            shipstationApiKey: apiKey,
            shipstationCarrierIds: carrierIds,
            warehouseName,
            warehousePhone,
            warehouseAddressLine1,
            warehouseCityLocality: warehouseCity,
            warehouseStateProvince: warehouseState,
            warehousePostalCode: warehousePostcode,
            warehouseCountryCode: warehouseCountry,
            shipToName,
            shipToPhone
        };

        try {
            const resp = await fetch(actionUrl, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(body)
            });
            if (!resp.ok) throw new Error(`POST failed: HTTP ${resp.status}`);
            const result = await resp.json();
            setStatusMsg(`Saved config: ${JSON.stringify(result)}`);
        } catch (err) {
            setStatusMsg(`Error saving config: ${err.message}`);
        }
    }

    return (
        <View padding="size-250">
            <Heading level={1}>ShipStation Config Editor</Heading>
            <Content marginBottom="size-200">{statusMsg}</Content>
            <Form maxWidth="size-6000">
                <TextField
                    label="API Key"
                    value={apiKey}
                    onChange={setApiKey}
                    isRequired
                />
                <TextField
                    label="Carrier IDs (comma separated)"
                    value={carrierIds}
                    onChange={setCarrierIds}
                    isRequired
                />
                <TextField
                    label="Warehouse Name"
                    value={warehouseName}
                    onChange={setWarehouseName}
                />
                <TextField
                    label="Warehouse Phone"
                    value={warehousePhone}
                    onChange={setWarehousePhone}
                />
                <TextField
                    label="Warehouse Address"
                    value={warehouseAddressLine1}
                    onChange={setWarehouseAddressLine1}
                />
                <TextField
                    label="Warehouse City"
                    value={warehouseCity}
                    onChange={setWarehouseCity}
                />
                <TextField
                    label="Warehouse State/Province"
                    value={warehouseState}
                    onChange={setWarehouseState}
                />
                <TextField
                    label="Warehouse Postcode"
                    value={warehousePostcode}
                    onChange={setWarehousePostcode}
                />
                <TextField
                    label="Warehouse Country"
                    value={warehouseCountry}
                    onChange={setWarehouseCountry}
                />
                <TextField
                    label="Ship-To Name (optional)"
                    value={shipToName}
                    onChange={setShipToName}
                />
                <TextField
                    label="Ship-To Phone (optional)"
                    value={shipToPhone}
                    onChange={setShipToPhone}
                />
                <Button variant="accent" onPress={handleSave}>Save</Button>
            </Form>
        </View>
    );
}
config.json
{"registration":"https://35582-shipstation-stage.adobeio-static.net/api/v1/web/admin-ui-sdk/registration","admin-ui-sdk/registration":"https://35582-shipstation-stage.adobeio-static.net/api/v1/web/admin-ui-sdk/registration"}
